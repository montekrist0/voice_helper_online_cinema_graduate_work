version: '3.8'
services:
  nginx:
    image: nginx:1.24.0
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - vh_app
    expose:
      - "80"
    ports:
      - "80:80"

  db:
    image: postgres:14
    container_name: db_container
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 2s
      timeout: 2s
      retries: 5
    restart: on-failure
    volumes:
      - postgresql_volume_compose:/var/lib/postgresql/data
      - ./etl/dump.sql:/docker-entrypoint-initdb.d/dump.sql
    ports:
      - "5432:5432"

  redis:
    image: redis:7.0.7
    container_name: redis_container
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - redis_volume:/data
    ports:
      - "6379:6379"
# TODO: выпилить редис из docker-compose, если не используется
  vh_app:
    image: python:3.10
    volumes:
      - ./voice_helper_app/src:/app
    env_file:
      - ./.env
    environment:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    restart: unless-stopped
    command: >
      bash -c "pip install --upgrade pip
      && pip install --no-cache-dir -r /app/requirements.txt
      && python /app/main.py"
    ports:
      - "8001:8001"



  vh_mongo_db:
    image: mongo:6.0.5-jammy
    restart: always
    expose:
      - "27017"
    env_file:
      - ./.env
    volumes:
      - ./db/mongo:/docker-entrypoint-initdb.d
#    healthcheck:
#      test: ["CMD", "sh", "-c", "command -v mongo && mongo --eval 'db.runCommand({ ping: 1 }).ok' | grep 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
    ports:
      - "27017:27017"

  vh_mongo_express:
    image: mongo-express:1.0.0-alpha
    restart: always
    expose:
      - "8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: vh_mongo_db
      ME_CONFIG_MONGODB_PORT: 27017
    ports:
      - "8081:8081"



  elastic:
    image: elasticsearch:8.5.3
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - USE_SSL=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 1s
      timeout: 5s
      retries: 120
    container_name: elastic_compose
    ports:
      - "9200:9200"
    volumes:
      - elastic_volume_compose:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.5.3
    environment:
      - ELASTICSEARCH_HOSTS=["http://elastic:9200"]
    ports:
      - "5601:5601"
    container_name: kibana_compose
    volumes:
      - kibana_volume_compose:/usr/share/kibana/data
    depends_on:
      elastic:
        condition: service_healthy
    restart: unless-stopped

  etl:
    build:
      context: ./etl
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_healthy
      elastic:
        condition: service_healthy
    container_name: etl_container
    restart: unless-stopped
    entrypoint: sh -c "python etl.py"


volumes:
  postgresql_volume_compose:
  redis_volume:
  elastic_volume_compose:
  kibana_volume_compose:
